/okviri/
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import numpy as np

from shared import init_plot, frame2quiver, frame_factory, update_quiver
import colors


def R2EA(R):
    beta = np.arctan2(-R[2, 0], np.sqrt(R[0, 0] ** 2 + R[1, 0] ** 2))
    alpha = np.arctan2(R[1, 0] / np.cos(beta), R[0, 0] / np.cos(beta))
    gamma = np.arctan2(R[2, 1] / np.cos(beta), R[2, 2] / np.cos(beta))
    return np.array([alpha, beta, gamma], dtype=float)


def EA2R(EA):
    c = np.cos
    s = np.sin
    alpha = EA[0]
    beta = EA[1]
    gamma = EA[2]
    return np.array([
        [c(alpha) * c(beta), c(alpha) * s(beta) * s(gamma) - s(alpha) * c(gamma),
         c(alpha) * s(beta) * c(gamma) + s(alpha) * s(gamma)],
        [s(alpha) * c(beta), s(alpha) * s(beta) * s(gamma) + c(alpha) * c(gamma),
         s(alpha) * s(beta) * c(gamma) - c(alpha) * s(gamma)],
        [-s(beta), c(beta) * s(gamma), c(beta) * c(gamma)]
    ], dtype=float)


def i_omega_i_to_EA_dot(i_omega_i, EA):
    beta = EA[1]
    gamma = EA[2]
    return 1 / np.cos(beta) * np.array([
        [0, np.sin(gamma), np.cos(gamma)],
        [0, np.cos(gamma) * np.cos(beta), -np.sin(gamma) * np.cos(beta)],
        [np.cos(beta), np.sin(gamma) * np.sin(beta), np.cos(gamma) * np.sin(beta)]
    ], dtype=float) @ i_omega_i


def fake_algorithm_transl_vel(i, T):
    if i < 60:
        j_p_i_dot = np.array([0, -1, 0], dtype=float)
    else:
        i_v_i = np.array([2 * np.pi, 0, 0], dtype=float)
        j_p_i_dot = T[:3, :3] @ i_v_i
    return j_p_i_dot


def fake_algorithm_angular_vel(i):
    if i < 30:
        i_omega_i = np.array([2 * np.pi, 0, 0], dtype=float)
    elif i < 60:
        i_omega_i = np.array([0, -2 * np.pi, 0], dtype=float)
    else:
        i_omega_i = np.array([0, 0, -2 * np.pi], dtype=float)
    return i_omega_i


def another_fake_algorithm_transl_vel(i, T):
    i_v_i = np.array([0, 0, 2 * np.pi / 12], dtype=float)
    j_p_i_dot = T[:3, :3] @ i_v_i
    return j_p_i_dot


def Omega(omega):
    omega_x, omega_y, omega_z = omega
    return np.array([
        [0, -omega_x, -omega_y, -omega_z],
        [omega_x, 0, omega_z, -omega_y],
        [omega_y, -omega_z, 0, omega_x],
        [omega_z, omega_y, -omega_x, 0]
    ], dtype=float)

def update(q, i_omega_i, dt):
    i_omega_i_norm = np.linalg.norm(i_omega_i)
    return (np.cos(i_omega_i_norm * dt / 2) * np.eye(4, dtype=float) + 1 / i_omega_i_norm * np.sin(i_omega_i_norm * dt / 2) * Omega(i_omega_i)) @ q

def q_to_R(q):
    eps_0, eps_1, eps_2, eps_3 = q
    return np.array([
        [1 - 2 * (eps_2 ** 2 + eps_3 ** 2), 2 * (eps_1 * eps_2 - eps_0 * eps_3), 2 * (eps_1 * eps_3 + eps_0 * eps_2)],
        [2 * (eps_1 * eps_2 + eps_0 * eps_3), 1 - 2 * (eps_1 ** 2 + eps_3 ** 2), 2 * (eps_2 * eps_3 - eps_0 * eps_1)],
        [2 * (eps_1 * eps_3 - eps_0 * eps_2), 2 * (eps_2 * eps_3 + eps_0 * eps_1), 1 - 2 * (eps_1 ** 2 + eps_2 ** 2)]
    ], dtype=float)


def p_q_to_T(q, p):
    T_ = np.eye(4, dtype=float)
    T_[:3, 3] = p.copy()
    R_ = q_to_R(q)
    T_[:3, :3] = R_
    return T_

def animate(i, frames, quivers, configurations, dt):
    move_i = True
    move_k = True

    #j_T_i = configurations[1]
    j_T_i = None
    j_q_i, j_p_i = configurations[1]
    i_q_k, i_p_k = configurations[2]

    if move_i:
        i_omega_i = np.array([0, -2 * np.pi / 12, 0], dtype=float)
        j_p_i_dot = another_fake_algorithm_transl_vel(i, q_to_R(j_q_i))
        j_p_i += j_p_i_dot * dt
        j_q_i = update(j_q_i, i_omega_i, dt)
        configurations[1] = (j_q_i, j_p_i)

    if move_k:

        k_omega_k = fake_algorithm_angular_vel(i)
        i_p_k_dot = fake_algorithm_transl_vel(i, q_to_R(i_q_k))
        i_p_k += i_p_k_dot * dt
        i_q_k = update(i_q_k, k_omega_k, dt)
        configurations[2] = (i_q_k, i_p_k)

    update_quiver(frames[1] @ p_q_to_T(j_q_i, j_p_i).T, quivers[1])
    update_quiver((frames[2] @ p_q_to_T(i_q_k, i_p_k).T) @ p_q_to_T(j_q_i, j_p_i).T, quivers[2])




if __name__ == "__main__":
    fig, ax = init_plot()

    num_frames = 180
    fps = 60
    dt = 1 / fps

    frame_j = frame_factory()
    #j_T_j = np.eye(4, dtype=float)
    j_q_j = np.array([1, 0, 0, 0], dtype=float)
    j_p_j = np.zeros(3, dtype=float)
    quiver_j = ax.quiver3D(*frame2quiver(frame_j @ p_q_to_T(j_q_j, j_p_j).T), arrow_length_ratio=0, colors=colors.darkgray)

    frame_i = frame_factory()
    j_T_i = np.eye(4, dtype=float)
    j_T_i[0, 3] += 1.5

    j_q_i = j_q_j.copy()
    j_p_i = np.array([1.5, 0, 0], dtype=float)

    quiver_i = ax.quiver3D(*frame2quiver(frame_i @ p_q_to_T(j_q_i, j_p_i).T), arrow_length_ratio=0, colors=[colors.red, colors.green, colors.blue])

    frame_k = frame_factory()
    
    i_q_k = j_q_j.copy()
    i_p_k = j_p_j.copy()
    quiver_k = ax.quiver3D(*frame2quiver((frame_k @ p_q_to_T(i_q_k, i_p_k).T) @ p_q_to_T(j_q_i, j_p_i).T), arrow_length_ratio=0, colors=[colors.cyan, colors.magenta, colors.orange])

    frames = [frame_j, frame_i, frame_k]
    quivers = [quiver_j, quiver_i, quiver_k]
    configurations = [(j_q_j, j_p_j), (j_q_i, j_p_i), (i_q_k, i_p_k)]

    ani = FuncAnimation(
        fig, 
        animate, 
        fargs=(frames, quivers, configurations, dt), 
        frames=num_frames,
        interval=dt * 1000, 
        repeat=False, 
        blit=False,
        init_func=lambda: None
    )
    
    plt.show()

/robot/
def __heron(self, a, b, c):
        s = (a + b + c) / 2
        return np.sqrt(s * (s - a) * (s - b) * (s - c))

def __dist(self, A, B):
    return np.sqrt((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2)

def detect_collision(self, o):
        eps = 1e-5

        points = self.I_chassis_points
        A, B, C, D = points

        t_1_area = self.__heron(self.__dist(A, B), self.__dist(B, o), self.__dist(o, A))
        t_2_area = self.__heron(self.__dist(B, C), self.__dist(C, o), self.__dist(o, B))
        t_3_area = self.__heron(self.__dist(C, D), self.__dist(D, o), self.__dist(o, C))
        t_4_area = self.__heron(self.__dist(D, A), self.__dist(A, o), self.__dist(o, D))
        

        r_area = self.__dist(A, B) * self.__dist(B, C)
        t_areas = t_1_area + t_2_area + t_3_area + t_4_area

        collision_detected = abs(r_area - t_areas) < eps
        return collision_detected

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from shared import init_plot_2D, R
import colors
from matplotlib.patches import Polygon, Circle
from zad_2_robot import Robot


class PID:
    __slots__ = ["k_p", "k_i", "k_d", "e_prev", "e_acc", "dt"]

    def __init__(self, dt, k_p=3.0, k_i=1.5, k_d=0.2):
        self.dt = dt
        self.k_p = k_p
        self.k_i = k_i
        self.k_d = k_d
        self.e_prev = self.e_acc = 0

    def reset(self):
        self.e_prev = self.e_acc = 0

    def __call__(self, e):
        e_diff = (e - self.e_prev) / self.dt
        self.e_acc += e * self.dt
        self.e_prev = e
        return self.k_p * e + self.k_i * self.e_acc + self.k_d * e_diff


class GoToGoalAlgorithm:
    __slots__ = ["pid", "robot", "I_g", "dt"]

    def __init__(self, robot, I_g, dt):
        self.pid = PID(dt, 1.0, 0.1, 0.1)
        self.robot = robot
        self.I_g = I_g
        self.dt = dt

    def __call__(self):
        e = np.arctan2(
            self.I_g[1] - self.robot.I_ksi[1],
            self.I_g[0] - self.robot.I_ksi[0],
        ) - self.robot.I_ksi[2]
        e = np.arctan2(np.sin(e), np.cos(e))

        R_v = self.robot.r * self.robot.phi_dot_max
        R_omega = self.pid(e)

        phis_dot = self.robot.R_inverse_kinematics(
            np.array([R_v, 0, abs(R_omega)], dtype=float)
        )
        phi_dot_lrmax = max(phis_dot[0], phis_dot[1])
        phi_dot_lrmin = min(phis_dot[0], phis_dot[1])

        if phi_dot_lrmax > self.robot.phi_dot_max:
            phi_dot_ld = phis_dot[0] - (phi_dot_lrmax - self.robot.phi_dot_max)
            phi_dot_rd = phis_dot[1] - (phi_dot_lrmax - self.robot.phi_dot_max)
        elif phi_dot_lrmin < 0:
            phi_dot_ld = phis_dot[0] + (0 - phi_dot_lrmin)
            phi_dot_rd = phis_dot[1] + (0 - phi_dot_lrmin)
        else:
            phi_dot_ld = phis_dot[0]
            phi_dot_rd = phis_dot[1]

        phis_dot_ld = max(0, min(self.robot.phi_dot_max, phi_dot_ld))
        phis_dot_rd = max(0, min(self.robot.phi_dot_max, phi_dot_rd))

        R_ksi_dot = R(self.robot.I_ksi[2]) @ self.robot.forward_kinematics(
            np.array([phis_dot_ld, phis_dot_rd, 0], dtype=float)
        )
        R_v_feas = R_ksi_dot[0]
        R_omega_feas = np.copysign(1, R_omega) * R_ksi_dot[2]

        return R_v_feas, R_omega_feas


class AvoidObstacleAlgorithm:
    __slots__ = ["pid", "robot", "I_o", "dt"]

    def __init__(self, robot, I_o, dt):
        self.pid = PID(dt, 1.0, 0.1, 0.1)
        self.robot = robot
        self.I_o = I_o
        self.dt = dt

    def __call__(self):
        e = np.arctan2(
            self.I_o[1] - self.robot.I_ksi[1],
            self.I_o[0] - self.robot.I_ksi[0],
        ) - self.robot.I_ksi[2] + np.pi
        e = np.arctan2(np.sin(e), np.cos(e))

        R_v = self.robot.r * self.robot.phi_dot_max
        R_omega = self.pid(e)

        phis_dot = self.robot.R_inverse_kinematics(
            np.array([R_v, 0, abs(R_omega)], dtype=float)
        )
        phi_dot_lrmax = max(phis_dot[0], phis_dot[1])
        phi_dot_lrmin = min(phis_dot[0], phis_dot[1])

        if phi_dot_lrmax > self.robot.phi_dot_max:
            phi_dot_ld = phis_dot[0] - (phi_dot_lrmax - self.robot.phi_dot_max)
            phi_dot_rd = phis_dot[1] - (phi_dot_lrmax - self.robot.phi_dot_max)
        elif phi_dot_lrmin < 0:
            phi_dot_ld = phis_dot[0] + (0 - phi_dot_lrmin)
            phi_dot_rd = phis_dot[1] + (0 - phi_dot_lrmin)
        else:
            phi_dot_ld = phis_dot[0]
            phi_dot_rd = phis_dot[1]

        phis_dot_ld = max(0, min(self.robot.phi_dot_max, phi_dot_ld))
        phis_dot_rd = max(0, min(self.robot.phi_dot_max, phi_dot_rd))

        R_ksi_dot = R(self.robot.I_ksi[2]) @ self.robot.forward_kinematics(
            np.array([phis_dot_ld, phis_dot_rd, 0], dtype=float)
        )
        R_v_feas = R_ksi_dot[0]
        R_omega_feas = np.copysign(1, R_omega) * R_ksi_dot[2]

        return R_v_feas, R_omega_feas


class StopAlgorithm:
    def __call__(self):
        return 0, 0


class PathPlanning:
    __slots__= ["robot", "I_g", "dt", "go_to_goal", "stop", "d_1", "algorithm", "I_o", "ani", "avoid_obstacle"]    
    
    def __init__(self, robot, I_g, dt, I_o, ani):
        self.robot = robot
        self.I_g = I_g
        self.I_o = I_o
        self.dt = dt
        self.go_to_goal = GoToGoalAlgorithm(robot, I_g, dt)
        self.avoid_obstacle = AvoidObstacleAlgorithm(robot, I_o, dt)
        self.stop = StopAlgorithm()
        self.d_1 = 0.05
        self.algorithm = self.go_to_goal
        self.ani = ani

    def __call__(self):
        
        at_goal = np.linalg.norm(self.robot.I_ksi[:2] - self.I_g[:2]) < self.d_1
        collision_detected = self.robot.detect_collision(self.I_o)

        min_distance_from_obstacle = np.linalg.norm(self.robot.I_ksi[:2] - self.I_o[:2])

        heading_away_from_obstacle = self.algorithm == self.avoid_obstacle and \
            min_distance_from_obstacle > 0.5

        heading_to_obstacle = self.algorithm == self.go_to_goal and \
            min_distance_from_obstacle < 0.4

        if collision_detected:
            print("Collision detected 😢")
            self.algorithm = self.stop
            self.ani.event_source.stop()
        elif at_goal:
            print("At goal 😎")
            self.algorithm = self.stop
            self.ani.event_source.stop()
        elif heading_away_from_obstacle:
            print("AO -> GTG")
            self.algorithm = self.go_to_goal
        elif heading_to_obstacle:
            print("GTG -> AO")
            self.algorithm = self.avoid_obstacle
        else:
            0

        return self.algorithm()


def animate(i, robot, shapes, dt):

    v, omega = path_planning()

    phis_dot = robot.R_inverse_kinematics(np.array([v, 0, omega], dtype=float))
    I_ksi_dot = robot.forward_kinematics(phis_dot)
    robot.update_state(I_ksi_dot, dt)

    shapes[0].xy = robot.I_chassis_points[:, :2]
    shapes[1].xy = robot.I_wheel_points_left[:, :2]
    shapes[2].xy = robot.I_wheel_points_right[:, :2]



if __name__ == "__main__":

    fig, ax = init_plot_2D(lim_from=-1.5, lim_to=1.5)

    fps = 30
    dt = 1 / fps

    configurations = []
    shapes = []

    I_g = np.array([-0.5, 0.5, 0], dtype=float)
    ax.add_patch(Circle(I_g[:2], radius=0.05, color=colors.yellow))

    I_o = np.zeros(3, dtype=float)
    ax.add_patch(Circle(I_o[:2], radius=0.05, color=colors.red))

    robot: Robot = Robot(np.array([1, -0.5, np.pi / 3], dtype=float))
    shapes.append(ax.add_patch(Polygon(robot.I_chassis_points[:, :2], color=colors.blue, alpha=0.75)))
    shapes.append(ax.add_patch(Polygon(robot.I_wheel_points_left[:, :2], color=colors.darkgray)))
    shapes.append(ax.add_patch(Polygon(robot.I_wheel_points_right[:, :2], color=colors.darkgray)))

    

    ani = FuncAnimation(
        fig,
        animate,
        fargs=(robot, shapes, dt),
        cache_frame_data=False,
        interval=dt * 1000,
        repeat=False,
        blit=False,
        init_func=lambda: None
    )

    path_planning = PathPlanning(robot, I_g, dt, I_o, ani)

    plt.show()

/imunoloskisustav/
import numpy as np
import matplotlib.pyplot as plt
import colors
from sampler import sampler

fig, ax = plt.subplots(1, figsize=(15, 5))

r = 4.5
k = 3.0
p = 8 
s = 1.5
delta = 2.8

def g(x_prev, dt, vectorized=False):
    if vectorized:
        T_t = x_prev[:, 0]
        E_t = x_prev[:, 1]        
    else:
        T_t = x_prev[0]
        E_t = x_prev[1]
    return np.array([
        dt * r * T_t - dt * k * T_t * E_t + T_t,
        dt * p * T_t ** 2 / (1 + T_t ** 2) + dt * s * E_t ** 2 / (1 + E_t ** 2) - delta *dt * E_t + E_t
    ], dtype=float)



if __name__ == "__main__":
    t_end = 10
    dt = 1 / 24
    t_arr = np.linspace(0, t_end, int(t_end / dt) + 1)

    x_0 = 5
    y_0 = 1

    ksi_curr = np.array([x_0, y_0], dtype=float)
    ksi_prev = ksi_curr.copy()
    ksi_arr = np.zeros((t_arr.shape[0], 2), dtype=float)
    ksi_arr[0] = ksi_curr

    M = 100
    particles = np.zeros((M, 2), dtype=float)
    particles[:, 0] = np.random.uniform(0, 7, M)
    particles[:, 1] = np.random.uniform(0, 2, M)
    particles_array = np.zeros((t_arr.shape[0], M, 2), dtype=float)
    
    
    particles_array[0] = particles.copy()

    Q = np.array([
        [0.0005, 0],
        [0, 0.0001]
    ], dtype=float)

    R = 0.1

    H = np.array([1, 0], dtype=float)


    eval_particles = True

    for t_i, t in enumerate(t_arr):
        if t > 0:
            #ksi_curr = np.array([np.sin(10 * t), np.round(np.cos(15 * t)).clip(min=0)], dtype=float)
            ksi_curr = g(ksi_prev, dt)
            ksi_prev = ksi_curr
            ksi_arr[t_i] = ksi_curr
            if not eval_particles:
                continue

            # prediction
            particles[:] = g(particles, dt, vectorized=True).T + np.random.multivariate_normal(np.zeros(2, dtype=float), Q, M)
            
            # correction
            z = np.dot(particles, H) + np.random.normal(0, R, M)
            diff = np.abs(z - particles[:, 0])
            x_1_ = y_0_ = np.max(diff)
            x_0_ = y_1_ = np.min(diff)
            weights = sim = (y_1_ - y_0_) / (x_1_ - x_0_) * (diff - x_0_) + y_0_
            weights /= np.sum(weights)

            #particles[:] = particles[sampler(weights)]
            particles[:] = particles[np.random.choice(M, M, p=weights)]

            particles_array[t_i] = particles.copy()


    if eval_particles:
        t_arr_resized = np.tile(np.expand_dims(t_arr, axis=1), (1, M)).reshape(-1)
        particles_array_x_resized = particles_array[:, :, 0].reshape(-1)
        particles_array_y_resized = particles_array[:, :, 1].reshape(-1)

        plt.scatter(t_arr_resized, particles_array_x_resized, s=0.5, c=colors.cyan, alpha=0.25, zorder=0)
        plt.scatter(t_arr_resized, particles_array_y_resized, s=0.5, c=colors.yellow, alpha=0.5, zorder=0)

    plt.plot(
        t_arr, ksi_arr[:, 0], c=colors.blue,
        linestyle="-", linewidth=1.5, zorder=1, label=r'$T(t)$'
    )
    plt.plot(
        t_arr, ksi_arr[:, 1], c=colors.orange,
        linestyle="-", linewidth=1.5, zorder=1, label=r'$E(t)$'
    )

    ax.legend(loc=0)

    plt.show()

/zrake/
import numpy as np
import scipy.stats
import colors

import matplotlib.pyplot as plt

class MixtureModel(scipy.stats.rv_continuous):
    def __init__(self, submodels, *args, weights = None, **kwargs):
        super().__init__(*args, **kwargs)
        self.submodels = submodels
        if weights is None:
            weights = [1 for _ in submodels]
        if len(weights) != len(submodels):
            raise(ValueError(f'There are {len(submodels)} submodels and {len(weights)} weights, but they must be equal.'))
        self.weights = [w / sum(weights) for w in weights]
        
    def _pdf(self, x):
        pdf = self.submodels[0].pdf(x) * self.weights[0]
        for submodel, weight in zip(self.submodels[1:], self.weights[1:]):
            pdf += submodel.pdf(x)  * weight
        return pdf
            
    def _sf(self, x):
        sf = self.submodels[0].sf(x) * self.weights[0]
        for submodel, weight in zip(self.submodels[1:], self.weights[1:]):
            sf += submodel.sf(x)  * weight
        return sf

    def _cdf(self, x):
        cdf = self.submodels[0].cdf(x) * self.weights[0]
        for submodel, weight in zip(self.submodels[1:], self.weights[1:]):
            cdf += submodel.cdf(x)  * weight
        return cdf

    def rvs(self, size):
        submodel_choices = np.random.choice(len(self.submodels), size=size, p = self.weights)
        submodel_samples = [submodel.rvs(size=size) for submodel in self.submodels]
        rvs = np.choose(submodel_choices, submodel_samples)
        return rvs

def truncated_exponential(upper_limit, lambd):
    return scipy.stats.truncexpon(b=upper_limit * lambd, scale=1 / lambd)
    
def truncated_normal(lower_limit, upper_limit, mu, sigma):
    return scipy.stats.truncnorm((lower_limit - mu) / sigma, (upper_limit - mu) / sigma, loc=mu, scale=sigma)

def substantially_different(value_1, value_2, eps=1e-15):
    return np.abs(value_1 - value_2) > eps

def learn_intrinsic_parameters(z_i, z_i_star, sigma_hit, lambda_short):
    z_hit = z_short = None

    while True:
        p_hit_nonnormalized = 1 / np.sqrt(2 * np.pi * sigma_hit ** 2) * np.exp(-0.5 * (z_i - z_i_star) ** 2 / sigma_hit ** 2)

        dz = 0.01
        z_array = np.linspace(0, z_max, int(z_max / dz))
        eta_hit_int = 1 / np.sqrt(2 * np.pi * sigma_hit ** 2) * np.exp(-0.5 * (z_array - z_i_star) ** 2 / sigma_hit ** 2)
        eta_hit = np.sum(eta_hit_int * dz)
        p_hit = p_hit_nonnormalized * eta_hit
        p_hit[z_i < 0] = 0
        p_hit[z_i > z_max] = 0

        eta_short = 1 / (1 - np.exp(-lambda_short * z_i_star))
        p_short = eta_short * lambda_short * np.exp(-lambda_short * z_i)
        p_short[z_i < 0] = 0
        p_short[z_i > z_i_star] = 0

        eta = (p_hit + p_short) ** -1

        e_i_hit = eta * p_hit
        e_i_short = eta * p_short

        z_hit_prev, z_short_prev, sigma_hit_prev, lambda_short_prev = z_hit, z_short, sigma_hit, lambda_short

        z_hit = 1 / z_i.shape[0] * np.sum(e_i_hit)
        z_short = 1 / z_i.shape[0] * np.sum(e_i_short)
        sigma_hit = np.sqrt(1 / np.sum(e_i_hit) * np.sum(e_i_hit * (z_i - z_i_star) ** 2))
        lambda_short = np.sum(e_i_short) / np.sum(e_i_short * z_i)

        c1 = z_hit_prev is not None and not substantially_different(z_hit_prev, z_hit)
        c2 = z_short_prev is not None and not substantially_different(z_short_prev, z_short)
        c3 = not substantially_different(sigma_hit_prev, sigma_hit)
        c4 = not substantially_different(lambda_short_prev, lambda_short)

        if c1 and c2 and c3 and c4:
            break

    return z_hit, z_short, sigma_hit, lambda_short




if __name__ == "__main__":
    fig = plt.figure()
    ax = fig.add_subplot()

    n = 10000
    z_hit = 0.75
    z_short = 0.25
    sigma_hit = 0.25
    lambda_short = 2.3
    z_max = 5
    z_i_star = 3

    # 1 način: np.random.choice
    N = truncated_normal(0, z_max, z_i_star, sigma_hit)
    E = truncated_exponential(z_i_star, lambda_short)
    z_i_choice = np.random.choice(2, n, p=[z_hit, z_short])
    z_i = (z_i_choice == 0) * N.rvs(n) + (z_i_choice == 1) * E.rvs(n)

    ax.hist(z_i, density=True, bins=30, color=colors.cyan)

    # 2 način: MixtureModel
    M = MixtureModel([N, E], weights=[z_hit, z_short])
    z_i_alt = M.rvs(n)
    ax.hist(z_i_alt, density=True, bins=30, color=colors.yellow)

    # PDF:
    x = np.linspace(0, z_max, 1000)
    ax.plot(x, M.pdf(x), color=colors.red)


    z_hit_hat, z_short_hat, sigma_hit_hat, lambda_short_hat = learn_intrinsic_parameters(z_i, z_i_star, 0.1, 1)
    N_hat = truncated_normal(0, z_max, z_i_star, sigma_hit_hat)
    E_hat = truncated_exponential(z_i_star, lambda_short_hat)
    M_hat = MixtureModel([N_hat, E_hat], weights=[z_hit_hat, z_short_hat])
    ax.plot(x, M_hat.pdf(x), color=colors.darkgray, linestyle=":")

    plt.show()

/trajektorija/
import numpy as np
from shared import init_plot, R_array, homogeneous, R_array_to_alphas
import matplotlib.pyplot as plt

if __name__ == "__main__":

    fig, ax = init_plot(lim_from=-3, lim_to=3)

    I_ksi_real = np.load("./real.npy")
    I_ksi_est = np.load("./est.npy")

    ax.scatter(I_ksi_real[:, 0], I_ksi_real[:, 1], s=2.0)
    ax.scatter(I_ksi_est[:, 0], I_ksi_est[:, 1], s=2.0)
    ax.legend([r'Real', r'Est'])

    real_h = homogeneous(I_ksi_real[:, :2])
    est_h = homogeneous(I_ksi_est[:, :2])
    Delta_R = R_array(I_ksi_real[:, 2]).transpose(0, 2, 1) @ R_array(I_ksi_est[:, 2])

    delta_p =  (real_h - (Delta_R @ np.expand_dims(est_h, axis=2)).reshape(-1, 3))[:, :2]

    ate_rot = np.sqrt(np.mean(np.abs(R_array_to_alphas(Delta_R)) ** 2)) 
    ate_pos = np.sqrt(np.mean(np.linalg.norm(delta_p, axis=1) ** 2))

    print(ate_pos, ate_rot)

    plt.show()

/tricikl/
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from shared import init_plot, R
from matplotlib.patches import Polygon

# wlm: "without last mask"
wlm = np.array([1, 1, 0], dtype=float)


def M(wheel_front_beta, wheel_front_l, wheel_left_l, wheel_right_l):
    return np.array([
        [np.sin(wheel_front_beta), -np.cos(wheel_front_beta), -wheel_front_l * np.cos(wheel_front_beta)],
        [1, 0, -wheel_left_l],
        [1, 0, -wheel_right_l],
        [np.cos(wheel_front_beta), np.sin(wheel_front_beta), wheel_front_l * np.sin(wheel_front_beta)],
        [0, 1, 0],
        [0, 1, 0]
    ], dtype=float)


toggle = 1
R_theta_dot = 0
def R_ksi_dot_generator(i):
    global toggle, R_theta_dot
    
    R_x_dot = 0.3
    if i == 60 or i == 240:
        toggle *= -1
    R_theta_dot += toggle * dt
    
    return np.array([R_x_dot, 0, R_theta_dot], dtype=float)



def animate(i, configurations, patches):
    #global wheel_front_beta, R_wheel_points_front
    global wheel_front_beta, wheel_front_l, wheel_left_l, wheel_right_l

    I_ksi = configurations[0]

    R_ksi_dot = R_ksi_dot_generator(i)
    M_i = M(wheel_front_beta, wheel_front_l, wheel_left_l, wheel_right_l)
    phi_dots_blank = 1 / wheel_r * M_i @ R_ksi_dot
    wheel_front_beta = np.arctan2(R_ksi_dot[0], -wheel_front_l * R_ksi_dot[2])
    #print(wheel_front_beta)
    R_wheel_points_front = R_wheel(wheel_points, wheel_front_l, wheel_front_alpha, wheel_front_beta)

    I_ksi_dot = wheel_r * R(I_ksi[2]).T @ np.linalg.pinv(M_i) @ phi_dots_blank
    #I_ksi_dot = R(I_ksi[2]).T @ R_ksi_dot
    I_ksi += I_ksi_dot * dt

    I_wheel_points_front = I_points(R_wheel_points_front, I_ksi)
    I_wheel_points_left = I_points(R_wheel_points_left, I_ksi)
    I_wheel_points_right = I_points(R_wheel_points_right, I_ksi)
    I_chassis_points = I_points(R_chassis_points, I_ksi)

    patches[0].xy = I_wheel_points_front[:, :2]
    patches[1].xy = I_wheel_points_left[:, :2]
    patches[2].xy = I_wheel_points_right[:, :2]
    patches[3].xy = I_chassis_points[:, :2]

    configurations[0] = I_ksi

def init_wheel_points(wheel_r):
    wheel_width = 0.03

    return np.array([
        [-wheel_width / 2, -wheel_r, 0],
        [wheel_width / 2, -wheel_r, 0],
        [wheel_width / 2, wheel_r, 0],
        [-wheel_width / 2, wheel_r, 0]
    ], dtype=float)


def R_wheel(wheel_points, l, alpha, beta):
    return (wheel_points @ R(beta) + np.array([l, 0, 0], dtype=float)) @ R(alpha)


def I_points(points, I_ksi):
    return points @ R(I_ksi[2]) + I_ksi * wlm

if __name__ == "__main__":

    fig, ax = init_plot(lim_from=-1.0, lim_to=2.0)

    num_frames = 360
    fps = 60
    dt = 1 / 60

    I_ksi = np.array([0.1, 0.1, np.pi / 3], dtype=float)
    configurations = [I_ksi]

    chassis_l = 0.5
    chassis_w = 0.3

    wheel_r = 0.07
    wheel_points = init_wheel_points(wheel_r)

    wheel_front_alpha = 0
    wheel_front_beta = np.pi / 2
    wheel_front_l = chassis_l 

    wheel_left_alpha = np.pi / 2
    wheel_left_beta = 0
    wheel_left_l = chassis_w / 2

    wheel_right_alpha = -np.pi / 2
    wheel_right_beta = np.pi
    wheel_right_l = chassis_w / 2

    R_wheel_points_front = R_wheel(wheel_points, wheel_front_l, wheel_front_alpha, wheel_front_beta)
    R_wheel_points_left = R_wheel(wheel_points, wheel_left_l, wheel_left_alpha, wheel_left_beta)
    R_wheel_points_right = R_wheel(wheel_points, wheel_right_l, wheel_right_alpha, wheel_right_beta)

    I_wheel_points_front = I_points(R_wheel_points_front, I_ksi)
    I_wheel_points_left = I_points(R_wheel_points_left, I_ksi)
    I_wheel_points_right = I_points(R_wheel_points_right, I_ksi)

    patches = []
    patches.append(ax.add_patch(Polygon(I_wheel_points_front[:, :2], color="#343a40")))
    patches.append(ax.add_patch(Polygon(I_wheel_points_left[:, :2], color="#343a40")))
    patches.append(ax.add_patch(Polygon(I_wheel_points_right[:, :2], color="#343a40")))


    R_chassis_points = np.array([
        [chassis_l, chassis_w / 2, 0],
        [0, chassis_w / 2, 0],
        [0, -chassis_w / 2, 0],
        [chassis_l, -chassis_w / 2, 0],
    ], dtype=float)

    I_chassis_points = I_points(R_chassis_points, I_ksi)

    patches.append(ax.add_patch(Polygon(I_chassis_points[:, :2], color="#fd7e14cc")))

    ani = FuncAnimation(
        fig,
        animate,
        fargs=(configurations, patches),
        frames=num_frames,
        interval=dt * 1000,
        repeat=False,
        blit=False,
        init_func=lambda: None
    )

    #ani.save('tricycle.gif', writer='imagemagick')

    plt.show()

/binarnibayes/
p(x|z_1:t) = p(z_t|x, z_1:t-1) * p(x|z_1:t-1) / p(z_t|z_1:t-1)
             = p(x|z_t) * p(z_t) * p(x|z_1:t-1) / p(x) * p(z_t|z_1:t-1)

p(not x|z_1:t) = p(not x) * p(z_t) * p(not x|z_1:t-1) / p(not x) * p(z_t|z_1:t-1)

log/ p(x|z_1:t) / p(not x|z_1:t) = p(x|z_t) * p(x|z_1:t-1) * p(not x) / p(not x|z_t) * p(not x|z_1:t-1) * p(x)

l_t(x) = log(p(x|z_t) / 1 - p(x|z_t)) - log(p(x) / 1 - p(x)) + l_t-1(x)
l_0(x) = log p(x) / 1 - p(x)